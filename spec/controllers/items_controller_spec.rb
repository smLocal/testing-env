require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ItemsController, :type => :controller do
  before :each do
    @item1 = Item.create(name:"mustard", qty: 100, checked: false)
    @item2 = Item.create(name:"mustard", qty: 100, checked: false)
  end

  # This should return the minimal set of attributes required to create a valid
  # Item. As you add validations to Item, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
    :name => "pickles",
    :qty => 5,
    :checked => false
    }
  end

  let(:invalid_attributes) do
    {
    :name => "",
    :qty => 0,
    :checked => false
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ItemsController. Be sure to keep this updated too.
  # let(:valid_session) { {} }

  describe "GET index" do
    before :each do
      get :index, {show_all: true}
    end
    it "assigns all items as @items" do
      expect(assigns(:items)).to include(@item1, @item2)
    end
    it "renders the index template" do
      expect(response).to render_template("index") 
    end
    it "response should be a success" do
      # expect(response).to be_success
      expect(response).to have_http_status(200)
    end
  end

  describe "GET show" do
    before :each do
      get :show, id: @item1.id
    end
    it "renders the show template" do
      expect(response).to have_http_status(200)
      expect(response).to render_template :show
    end
    it "assigns an item to @item" do
      expect(assigns(:item)).to eq(@item1)
    end
  end

  describe "GET new" do
    it "assigns a new item as @item" do
      get :new
      expect(assigns(:item)).to be_a_new(Item)
    end
  end

  describe "GET edit" do
    it "assigns the requested item as @item" do
      item = Item.create! valid_attributes
      get :edit, {:id => item.to_param}
      expect(assigns(:item)).to eq(item)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Item" do
        expect {
          post :create, {:item => valid_attributes}
        }.to change(Item, :count).by(1)
      end

      it "assigns a newly created item as @item" do
        post :create, {:item => valid_attributes}
        expect(assigns(:item)).to be_a(Item)
        #expect(assigns(:item)).to be_persisted
      end

      it "redirects to the created item" do
        post :create, {:item => valid_attributes}
        expect(response).to redirect_to(Item.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved item as @item" do
        post :create, {:item => invalid_attributes}
        expect(assigns(:item)).to be_a_new(Item)
      end

      it "re-renders the 'new' template" do
        post :create, {:item => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let :new_attributes do
        {
          :name => "alsopickles",
          :qty => 5,
          :checked => false
        }
      end

      it "updates the requested item" do
        item = Item.create! valid_attributes
        put :update, {:id => item.to_param, :item => new_attributes}
        item.reload
        expect(assigns(:item)).to be_a(Item)
      end

      it "assigns the requested item as @item" do
        item = Item.create! valid_attributes
        put :update, {:id => item.to_param, :item => valid_attributes}
        expect(assigns(:item)).to eq(item)
      end

      it "redirects to the item" do
        item = Item.create! valid_attributes
        put :update, {:id => item.to_param, :item => valid_attributes}
        expect(response).to redirect_to(item)
      end
    end

    describe "with invalid params" do
      it "assigns the item as @item" do
        item = Item.create! valid_attributes
        put :update, {:id => item.to_param, :item => invalid_attributes}
        expect(assigns(:item)).to eq(item)
      end

      it "re-renders the 'edit' template" do
        item = Item.create! valid_attributes
        put :update, {:id => item.to_param, :item => invalid_attributes}
        expect(response).to render_template :edit
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested item" do
      item = Item.create! valid_attributes
      expect {
        delete :destroy, {:id => item.to_param}
      }.to change(Item, :count).by(-1)
    end

    # it "redirects to the items list" do
    #   item = Item.create! valid_attributes
    #   delete :destroy, {:id => item.to_param}
    #   expect(response).to render_template :index
    # end
  end

end
